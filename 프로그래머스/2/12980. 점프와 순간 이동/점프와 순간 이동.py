def my_solution(n):
    
    # 한 번에 K 칸을 앞으로 점프 -> K만큼 건전지 사용
    # (현재까지 온 거리) x 2 에 해당하는 위치로 순간이동 -> 건전지 사용 X (가능하면 순간이동)
    ans = 0
    # 2배를 최대한 활용해야한다.
    # 반토막 내고 시작하면 제일 좋은 것
    # 어차피 반토막 이상 숫자면 x2 해도 넘어감
    count = 0
    while n != 0 :
        if n % 2 == 0:
            n /= 2
        else:
            n -= 1
            count += 1
            n /= 2
    
    return count

# 놀라운 사실
# 순간이동은 현재 위치에서 2를 곱하는 것과 같습니다. 이는 이진법에서 왼쪽으로 시프트하는 것과 동일합니다.
# 한 칸 점프는 1을 더하는 것과 같습니다. 이는 이진법에서 1을 더하는 것과 동일합니다.
# 모든 자연수는 2의 거듭제곱들의 합으로 표현할 수 있습니다.
# 이 2의 거듭제곱들이 바로 순간이동으로 도달할 수 있는 위치들입니다.
# 나머지 간격은 점프로 채워야 하므로, 결국 이진법에서 1의 개수만큼 점프가 필요합니다.
# n의 이진 표현에서 1의 개수를 세는 것과 동일

def solution(n):
    return bin(n)[2:].count('1')